package br.ufma.lsdi.smartlab.service.database;

import br.ufma.lsdi.smartlab.service.data.Beacon;
import br.ufma.lsdi.smartlab.service.data.Device;
import br.ufma.lsdi.smartlab.service.data.HasA;
import br.ufma.lsdi.smartlab.service.data.MHub;
import br.ufma.lsdi.smartlab.service.data.Person;
import br.ufma.lsdi.smartlab.service.data.PhysicalSpace;
import java.util.Set;
import java.util.UUID;

public interface ServiceDao {
    /**
     * Insert Object
     * the only parameter is the object to be inserted
     * @return the id generated by the database or -1 in case of error
     */
    public long insertBeacon(Beacon b);
    public long insertDevice(Device d);
    public long insertHasA(HasA h);
    public long insertMHub(MHub m);
    public long insertPerson(Person p);
    public long insertPhysicalSpace(PhysicalSpace r);
    
    /**
     * Delete Object
     * the only parameter is the id of the object to be deleted
     * @return true if the object has been deleted or false if it has not
     */
    public boolean deleteBeacon(UUID thingID);
    public boolean deleteBuilding(long buildingID);
    public boolean deleteCity(long cityID);
    public boolean deleteDevice(long deviceID);
    public boolean deleteHasA(long hasAID);
    public boolean deleteMHub(UUID mhubID);
    public boolean deletePerson(long personID);
    public boolean deletePhysicalSpace(long roomID);
    
    /**
     * Update Object
     * the only parameter is the object to be updated
     * the object's id must be the one to be updated on the database
     * @return true if the object has been updated or false if it has not
     */
    public boolean updateBeacon(Beacon b);
    public boolean updateDevice(Device d);
    public boolean updateHasA(HasA h);
    //public boolean updateMHub(MHub m);
    public boolean updatePerson(Person p);
    public boolean updatePhysicalSpace(PhysicalSpace r);
    
    /**
     * Get Objects
     * no parameters
     * @return a Set all the objects of one type stored at the database
     */
    public Set<Beacon> getBeacons();
    public Set<Device> getDevices();
    public Set<HasA> getHasAs();
    public Set<MHub> getMHubs();
    public Set<Person> getPersons();
    public Set<PhysicalSpace> getPhysicalSpaces();
    
    /**
     * Specific Gets
     * Gets a Specific Set of Objects based on the parameters
     */
    /**
     * Gets a specific PhysicalSpace
     * @param roomID the id of the Room
     * @return the PhysicalSpace
     */
    public PhysicalSpace getPhysicalSpace(long roomID);
    
    /**
     * Gets a specific PhysicalSpace
     * @param room the name of the Room
     * @return the PhysicalSpace
     */
    public PhysicalSpace getPhysicalSpaceByName(String room);
    
    /**
     * Gets all the Things located at a specific Room
     * @param roomID the id of the Room
     * @return A Set of Devices
     */
    public Set<Device> getThingsByRoom(long roomID);
    
    /**
     * Gets all the MHubs located at a specific Room
     * @param roomID the id of the Room
     * @return A Set of Devices
     */
    public Set<Device> getMHubsByRoom(long roomID);
    
    /**
     * Gets all the Things located with a specific Person
     * @param personID the id of the Person
     * @return A Set of Devices
     */
    public Set<Device> getThingsByPerson(long personID);
    
    /**
     * Gets all the MHubs located with a specific Person
     * @param personID the id of the Person
     * @return A Set of Devices
     */
    public Set<Device> getMHubsByPerson(long personID);
    
    /**
     * Gets a specific HasA (Devices+Persons+Rooms) with a specific Device
     * @param deviceID the id of the Device
     * @return the HasA containing the Devices, Persons and Rooms
     */
    public HasA getHasAByDevice(long deviceID);
    
    /**
     * Gets all the specific HasA (Devices+Persons+Rooms) with a specific Person
     * @param personID the id of the Person
     * @return A Set of HasA containing the Devices, Persons and Rooms
     */
    public Set<HasA> getHasAByPerson(long personID);
    
    /**
     * Gets a specific Device
     * @param deviceID the id of the Device
     * @return the Device
     */
    public Device getDevice(long deviceID);
    
    /**
     * Gets a specific Device
     * @param mhubID the id of the MHub
     * @return the Device
     */
    public Device getDeviceByMHub(UUID mhubID);
    
    /**
     * Gets a specific Device
     * @param thingID the id of the MHub
     * @return the Device
     */
    public Device getDeviceByThing(UUID thingID);
    
    /**
     * Gets a specific Beacon
     * @param thingID the id of the Beacon
     * @return the Beacon
     */
    public Beacon getBeacon(UUID thingID);
    
    /**
     * Gets a specific MHub
     * @param mhubID the id of the MHub
     * @return the MHub
     */
    public MHub getMHub(UUID mhubID);
    
    /**
     * Gets a specific Person
     * @param personID the id of the Person
     * @return the Person
     */
    public Person getPerson(long personID);


    public Person getPerson_(long personID);





    /**
     * Gets a specific Person
     * @param personEmail the email of the Person
     * @return the Person
     */
    public Person getPersonByEmail(String personEmail);
    
    /**
     * Gets a specific Person
     * @param mhubID the id of the MHub
     * @return the Person
     */
    public Person getPersonByMHub(UUID mhubID);
    
    /**
     * Gets a specific Person
     * @param thingID the id of the Thing
     * @return the Person
     */
    public Person getPersonByThing(UUID thingID);
    
    /**
     * Gets a specific PhysicalSpace
     * @param mhubID the id of the MHub
     * @return the PhysicalSpace
     */
    public PhysicalSpace getPhysicalSpaceByMHub(UUID mhubID);
    
    /**
     * Gets a specific PhysicalSpace
     * @param thingID the id of the Thing
     * @return the PhysicalSpace
     */
    public PhysicalSpace getPhysicalSpaceByThing(UUID thingID);
    
}



